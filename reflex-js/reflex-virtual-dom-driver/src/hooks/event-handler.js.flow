/* @flow */

import type {Event, EventHandler, EventTarget} from "../dom"
import type {Dictionary} from "object-as-dictionary"
import type {Address} from "reflex"
import type {Hook} from "../hook"

export type EventConfig = {type:string, capture:boolean}

export type EventPhaseName
  = 'capture'
  | 'bubble'

export type Target
  = EventTarget
  & {[key:string]: EventListener}

export type PropagatedEvent
  = Event
  & {currentTarget: Target}

export type handleEvent = (phase:EventPhaseName) =>
  (event:Event) => void

export type {Address, EventListener}

declare export function eventHandler <message>
  (address:Address<message>):
  Hook<Target>

declare export var nameOverrides:Dictionary<string>
declare export var supportedEvents:Dictionary<EventConfig>
